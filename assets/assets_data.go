// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 4, 1, 19, 17, 47, 880928070, time.UTC),
		},
		"/index.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "index.tmpl",
			modTime:          time.Date(2019, 4, 1, 19, 17, 47, 880790292, time.UTC),
			uncompressedSize: 2774,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcd\xae\xdb\x36\x13\xdd\xfb\x29\x06\x44\xbe\xdd\x27\x29\x89\x37\x45\x20\x09\xc8\x4d\xd1\x5d\x10\x20\x8b\x76\x11\x74\x41\x89\xe3\x88\xb9\x94\xa8\x90\x23\xf7\xba\x86\xdf\xbd\xe0\x8f\x2c\x51\xb5\x73\x5b\x14\x4d\xbd\x22\x67\x86\x67\xe6\x9c\x19\x8b\x2c\x3b\xea\x55\xbd\xdb\x95\x1d\x72\x51\xef\x00\x00\x4a\x25\x87\x47\x30\xa8\x2a\x66\xe9\xa4\xd0\x76\x88\xc4\xa0\x33\x78\x70\x16\x4e\xb2\x2d\xbc\x23\x6f\xad\x65\x40\xa7\x11\x2b\x46\xf8\x44\x85\xdb\x47\x0c\xdb\x1a\x39\x12\x58\xd3\x56\xac\x23\x1a\xed\x9b\xa2\x68\xb5\xc0\xfc\xcb\xd7\x09\xcd\x29\x6f\x75\x5f\x84\x65\xb6\xcf\xf7\xf9\xab\xdc\x2a\xd9\xe7\xbd\x1c\xf2\x2f\x96\xd5\x65\x11\xce\xdf\x00\x9b\x0b\xf0\xa6\x34\x18\x76\x65\x11\x68\xec\xca\x46\x8b\x53\x3c\x3d\x82\x14\x15\x13\xd8\x6b\x17\x3b\x46\xeb\x41\x9b\xde\x3b\x5a\x3d\x1c\xd1\x10\x03\x1c\xda\xc0\xa5\x9f\x14\xc9\x91\x1b\x2a\x5c\x50\x26\x38\x71\x06\x3d\x52\xa7\x45\xc5\x46\x6d\x89\xd5\xbb\x00\x22\xe4\xd1\x63\x1c\xa4\xc2\xc8\xdc\xdb\xe5\x30\x4e\xe4\x3d\x7e\x95\x79\x7f\x54\x2a\xac\x07\xde\x63\xea\xe5\x6d\x8b\x23\x55\xec\x7c\xce\xdf\xfa\xe5\xe5\xc2\x8a\x15\xa6\xe2\x0d\xaa\x0d\x66\xe6\x8d\x0c\x0e\xda\x24\x60\xb5\x45\x85\x2d\x81\xdb\x94\x85\x0f\x8a\xb4\x0b\x21\x8f\xb1\xfa\x94\x82\x9e\xc8\x1f\xd7\xa6\xe7\xb4\xe2\x12\xec\x70\xdd\x9f\xcf\x86\x0f\x9f\x11\x5e\x3c\xe2\xe9\xff\xf0\xe2\xc8\xd5\x84\xf0\xa6\x82\xfc\xc3\x44\x3f\xf9\xc3\xf6\x72\xb9\x46\xaf\xd4\x08\xec\x0d\x17\x52\x33\x9f\xf1\x7c\xf6\x20\x70\xb9\x30\xf0\x30\xc1\x14\x10\x9d\x31\x68\x14\x2b\x82\x56\x71\x6b\x37\x75\xda\x55\xa1\x2b\x91\xbc\x1c\x2b\xf8\x7a\x8d\x9b\xe8\x11\x18\xe1\x20\x62\xcd\x65\x63\x12\xa1\xbc\x4e\xa9\x50\xbf\xf1\x63\xa6\x47\x92\x7a\xb0\xdb\xa2\xae\x66\x21\xed\xa8\xf8\xa9\x62\x83\x1e\xd6\x83\xd1\x48\x02\x81\x23\x75\x4b\x5b\x63\xa7\x02\x57\x87\xdd\x48\xca\x7c\xcc\x96\x5b\x40\x87\x4e\x0a\x81\x83\x4b\xc1\x1b\x85\x02\x02\x00\x8a\xa0\x61\xec\x7c\x59\x84\xe8\x14\xe2\x6e\xef\x7e\xe1\xc7\x0f\xa1\xf6\xfc\x41\xd2\x8f\x2e\xfb\xb6\x8b\xeb\x12\x56\xdd\xba\xad\xf0\xed\xe4\x8b\xcc\x41\xe1\x50\x6a\x7d\x53\xf8\x8d\xe8\xfd\xb8\x7f\x4e\xf4\x25\x5b\xdb\xf1\x61\x40\x05\xbd\x16\x78\x47\x68\x87\x17\xc3\x32\x17\xf6\x1d\xb5\x7e\x3f\xee\x67\xad\xdf\x85\x0a\xde\x6b\x81\xdf\x59\xee\xab\xe4\xc9\x68\x1a\x4e\x78\x5b\xb5\xb9\x07\x6e\x38\x5d\x54\x10\x6d\x25\x66\xea\xf8\x4f\xd4\x7c\x90\xf4\x91\x13\x3e\xa7\xe6\xfc\xe9\x59\xbe\x33\x8b\xbe\xa3\x91\x03\x1d\x80\xfd\x4f\xb0\x7f\x41\xeb\x79\xb3\x58\xdd\x78\xc7\x69\xfe\x93\x88\xf3\x60\x83\xf3\x9c\xcf\x09\xd5\xb7\x0f\x1f\xe1\x72\xf9\x56\xc4\xbb\x24\x62\xd3\x90\x6b\xaf\x3f\xfd\x90\xed\x5f\xbf\xfc\xf5\xfe\xe7\xda\x5d\xeb\xb7\xda\xcc\xa0\xe7\x4f\x0a\x87\xcf\xd4\x55\x6c\xcf\xc0\xca\xdf\xd1\x2d\x56\x8c\xfd\xff\x18\x76\xff\x9c\xec\xcf\xdf\xa2\x72\x6c\x0c\x7c\x9d\xb8\x92\x74\x82\x4f\x2f\xb3\x57\x7f\x87\xcc\xb1\x31\x59\x3c\x9b\xf0\x79\x7d\x9f\xcf\x86\xce\xfc\xb7\x98\x51\xea\xfb\xc9\xdb\x0e\xdb\xc7\x46\x3f\xb1\xeb\xa1\xc9\xe2\x92\x7e\xa9\x2a\x31\xc7\xd1\x24\x33\x21\xab\xa3\x35\xcd\x71\xa3\x8c\xcc\x9f\xda\x14\xe3\x7e\x37\x04\x7a\x56\xa4\xbf\x2c\x10\xa4\xb7\xe6\x7a\xf2\xd7\x23\xbf\x44\x24\x4b\x77\x9f\xcf\x37\xc1\x44\x14\xff\xa7\x76\x6a\x7a\x49\xf3\xcb\x29\x38\x58\x1d\x5f\x6c\x65\x11\x0c\xfe\xdd\x17\xde\x7b\xee\x01\xe8\xde\xb3\x7f\x04\x00\x00\xff\xff\x70\x15\x0f\x75\xd6\x0a\x00\x00"),
		},
		"/static": &vfsgen۰DirInfo{
			name:    "static",
			modTime: time.Date(2019, 4, 1, 19, 17, 47, 881790047, time.UTC),
		},
		"/static/script.js": &vfsgen۰CompressedFileInfo{
			name:             "script.js",
			modTime:          time.Date(2019, 4, 1, 19, 17, 47, 881583063, time.UTC),
			uncompressedSize: 1359,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x5f\x6b\xdb\x30\x14\xc5\xdf\xf3\x29\x2e\x5e\x41\x12\xad\x55\x4a\xdf\x56\xfa\x32\xb6\x41\x5e\xb6\xbd\xaf\x63\x28\xd6\x4d\x2c\x22\xcb\x9e\x74\x95\x25\x8c\x7c\xf7\x21\xff\x9b\xdc\x92\x76\x81\x80\x2d\x9d\x7b\xf4\x3b\xd6\x95\xb6\xd1\x55\x64\x5a\x07\x3b\xa4\xcf\xc6\xe2\x17\xd5\x20\xdf\x1a\x8b\x6b\x2d\xe0\xcf\x0a\x00\xe0\xa0\x3c\xa4\x91\x6f\x8a\x6a\x78\x84\xab\x69\x5a\x1e\x94\xe5\xe2\xa1\xd7\x78\xa4\xe8\xdd\x2c\x93\x21\x6e\x02\x79\x3e\xbf\x5b\x15\x68\xed\x34\x1e\xbf\x6e\x39\x7b\x7a\x62\x02\xae\xe1\x4e\x3c\xac\xce\xab\xd5\x15\xd7\x6d\x15\x1b\x74\x24\xa4\x47\xa5\x4f\x7c\x62\xe2\x13\xc1\x24\x90\x3b\xa4\x4f\x16\xd3\xe3\x87\xd3\x5a\xf3\xa2\x6a\xdd\x01\x3d\x15\xa9\x32\x20\x25\x9a\xbe\xe0\x2a\xf3\x18\x2c\x86\xd1\xe2\x5d\xec\x6c\xab\xf4\x4f\x6b\xdc\xbe\x10\xb2\x75\x9c\x55\xd6\x54\x7b\x76\x03\x73\x05\x66\x25\xe9\x87\xb2\xf3\x78\x40\x47\x1f\x71\xab\xa2\xa5\x29\x73\x6e\x6b\x5c\x17\xa9\x4c\x71\xdf\xd7\x46\x6b\x74\x85\x90\xe4\xcd\x6e\x87\x7e\x5a\x21\xab\x3a\x8f\xcf\xe7\x7f\xbc\x2c\xb3\x60\x42\x56\xb5\x72\x3b\xbc\x90\x22\xd7\x96\x56\x6d\xd0\x32\x21\x09\x8f\xc4\xf3\x4d\x5c\x3a\x66\xab\x27\x83\x36\x52\x3f\xd7\xfa\x46\x11\x13\x32\xd4\xed\x6f\x3e\x53\x0d\x50\xb7\xb7\x10\xd0\x62\x45\x30\xa8\x61\x50\x83\x72\x1a\x92\x1e\xda\x2e\xb1\x85\x29\x81\x5c\x98\x86\x94\x22\x05\xbf\x14\x62\x92\x8f\x2e\x4c\xc8\xda\x68\xe4\xcf\x40\xd9\x35\xd5\x26\x48\xa3\xaf\x59\xa6\xcc\x71\x27\x65\x88\x9b\xc6\xbc\x9d\xa5\xe9\xee\x61\x63\x08\xbc\x22\x84\xa6\xd5\x38\x6f\x40\xd3\xdd\x97\x1b\x43\x65\x9a\x29\xd3\xcc\x9b\xfb\x20\x5f\x94\xbc\x9e\xa6\xd7\x8f\x89\x0e\xca\x46\xbc\x18\x2a\xe3\x8e\x01\x7b\xe8\x5f\x51\x59\x43\xa7\x05\x6e\x0c\x58\x8e\xe3\xaf\xc3\x9a\x2d\xf0\x7e\xd9\xaa\xc6\x6a\x8f\xf3\xd9\xce\x3f\x60\x32\x1c\xcd\xca\x9e\x6e\x66\x92\x55\x08\xbc\xd0\x26\x74\x56\x9d\x8a\x1b\x28\x8c\xb3\xc6\x61\x91\xb7\x34\xa0\x0d\xf8\x9f\xae\xcf\x3f\xcd\x79\x91\x39\x9d\xa7\x61\x33\x8b\x17\x2d\x94\x9f\xcd\xe9\x5e\x4a\xdd\x0e\x8f\x70\xb9\xf7\x17\x15\x78\x24\x78\x9c\xeb\x64\xe8\xac\x21\xce\x24\x13\xdf\xef\x7e\x2c\x1b\x6a\xbc\x5c\x98\x90\x8a\xc8\x73\xa6\x7a\x04\x76\x93\x2c\x84\x1c\x08\x79\x76\x92\xd3\xff\x6f\x00\x00\x00\xff\xff\x5f\x27\x0c\x5a\x4f\x05\x00\x00"),
		},
		"/static/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2019, 4, 1, 19, 17, 47, 882269783, time.UTC),
			uncompressedSize: 617,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x4e\x02\x31\x10\xc6\xef\xfb\x14\x63\xb8\x99\xd4\x40\xe4\x54\xde\xc3\xfb\x2c\xed\xe2\xc4\x76\xa6\xce\x4e\x0d\x84\xf0\xee\x66\xcb\x1a\x51\x41\xae\x9d\xef\xcf\xef\x4b\x1f\x8f\x1d\x00\xc0\x20\x6c\x6e\xc0\x4c\xe9\xe0\xe1\x25\x6a\x40\xc6\x4d\x77\xea\xba\x41\x34\xc3\x59\x93\x51\x77\xc4\x1e\x96\xed\xd0\x57\x33\xe1\xf9\xd4\xe3\xf6\x6d\xa7\x52\x39\x78\x16\x8e\x0f\x94\x8b\xa8\x21\xdb\xa6\x9d\xb7\x92\x44\x3d\xf1\x6b\x54\x9a\x9f\x7a\xd1\x10\xb5\xa9\x37\xd0\x5e\x0a\x86\x40\xbc\xf3\xcb\xdf\xee\x89\xcd\xc3\x15\xb7\xeb\xc5\x4c\xb2\x5f\x95\x3d\x8c\x92\x28\xc0\x62\xbd\x5e\xcf\x71\xdb\xaa\xa3\xa8\x87\x22\xc4\x16\xb5\x31\x3f\x49\xb5\x52\xcd\x49\x31\x12\x1e\xcf\xec\x81\xc6\x92\xf0\xe0\xa1\xb1\x34\x59\x2e\xcf\xae\x27\x73\x8a\x16\x5d\x96\x10\xef\x39\x16\xc4\x53\xee\x40\x29\xba\x84\x7d\x4c\xc7\xeb\x0c\xff\xee\xbc\x33\xea\xd4\x01\x5c\x16\xfd\x64\xf9\x46\x99\x37\x4e\x1f\x87\x76\x13\x78\x9a\xf8\x5e\x31\x91\x1d\x8e\x97\x58\x5f\xf5\xb0\x5a\x96\xfd\x1f\xa9\xfb\xc0\x54\xe3\xcd\xd0\xb1\xf6\x99\x6e\x74\x7e\x06\x00\x00\xff\xff\x76\x17\xe3\xa2\x69\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.tmpl"].(os.FileInfo),
		fs["/static"].(os.FileInfo),
	}
	fs["/static"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static/script.js"].(os.FileInfo),
		fs["/static/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
